import matplotlib.pyplot as plt
import io 
import base64
from PIL import Image
import numpy as np 

def hash_image(df):
    fig, ax = plt.subplots()
    ax.scatter(df['x'], df['y'])

    # Save the figure to an in-memory bytes buffer in PNG format
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png', bbox_inches='tight')
    plt.close(fig)  # Close the figure to free resources
    buf.seek(0)     # Rewind the buffer to the beginning

    # Convert the image in the buffer to a base64 encoded string
    img_bytes = buf.getvalue()
    img_base64 = base64.b64encode(img_bytes).decode('utf-8')

    return img_base64

def unhash_image(img_base64):

    # decode pic_hash to png
    # Step 1: Decode the base64 hash back to bytes
    pic_bytes = base64.b64decode(img_base64)

    # Step 2: Convert bytes to an image using PIL
    image = Image.open(io.BytesIO(pic_bytes))

    return image

PROB = ""

def decode_base64_and_plot(base64_str, save=True):
    # # Decode the base64 string
    # img_data = base64.b64decode(base64_str)

    # # Create a BytesIO object from the decoded data
    # img_buffer = io.BytesIO(img_data)

    # # Read the image from the buffer and display it
    # img = plt.imread(img_buffer)
    # plt.imshow(img)
    # plt.axis('off')  # Hide axes
    # plt.show()
    # if save: 
    #     # plt.tight_layout()
    #     # Save the image to a file
    #     fig.savefig('images/cluster_ex.pdf', dpi=300, bbox_inches='tight')

    # Decode the base64 string
    img_data = base64.b64decode(base64_str)

    # Create a BytesIO object from the decoded data
    img_buffer = io.BytesIO(img_data)

    # Read the image from the buffer
    img = plt.imread(img_buffer)

    # Create a figure and axis
    fig, ax = plt.subplots()
    ax.imshow(img)
    ax.axis('off')  # Hide axes

    # if save:
    #     # Save the image to a file
    #     fig.savefig('images/blank.pdf', dpi=300, bbox_inches='tight')

    plt.show()

# decode_base64_and_plot(PROB, save=False)